{"ast":null,"code":"var _jsxFileName = \"/Users/jakebedell/Desktop/Thinkful/Projects/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/Pomodoro.js\";\nimport React, { useState } from \"react\";\nimport useInterval from \"../utils/useInterval\";\nimport Session from \"./Session\";\nimport DurationButtons from \"./DurationButtons\";\nimport TimerControls from \"./TimerControls\";\n\nfunction nextTick(prevState) {\n  const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n  return { ...prevState,\n    timeRemaining\n  };\n}\n\nfunction nextSession(focusDuration, breakDuration) {\n  return currentSession => {\n    if (currentSession.label === \"Focusing\") {\n      return {\n        label: \"On Break\",\n        timeRemaining: breakDuration * 60\n      };\n    }\n\n    return {\n      label: \"Focusing\",\n      timeRemaining: focusDuration * 60\n    };\n  };\n}\n\nfunction Pomodoro() {\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  const [session, setSession] = useState(null);\n  const [focusDuration, setFocusDuration] = useState(25);\n  const [breakDuration, setBreakDuration] = useState(5);\n\n  const handleFocusDecrease = () => {\n    if (focusDuration > 5) setFocusDuration(focusDuration - 5);\n  };\n\n  const handleFocusIncrease = () => {\n    if (focusDuration < 60) setFocusDuration(focusDuration + 5);\n  };\n\n  const handleBreakDecrease = () => {\n    if (breakDuration > 1) {\n      setBreakDuration(breakDuration - 1);\n    }\n  };\n\n  const handleBreakIncrease = () => {\n    if (breakDuration < 15) {\n      setBreakDuration(breakDuration + 1);\n    }\n  };\n\n  const handleStopSession = () => {\n    setIsTimerRunning(false);\n    setSession(null);\n  };\n\n  const displayDuration = label => {\n    if (label === \"Focusing\") {\n      return focusDuration;\n    } else return breakDuration;\n  };\n\n  const updateAria = (time, label) => {\n    return 100 - time / (displayDuration(label) * 60) * 100;\n  };\n\n  const updatedAria = updateAria(session === null || session === void 0 ? void 0 : session.timeRemaining, session === null || session === void 0 ? void 0 : session.label);\n  useInterval(() => {\n    if (session.timeRemaining === 0) {\n      new Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play();\n      return setSession(nextSession(focusDuration, breakDuration));\n    }\n\n    return setSession(nextTick);\n  }, isTimerRunning ? 1000 : null);\n\n  function playPause() {\n    setIsTimerRunning(prevState => {\n      const nextState = !prevState;\n\n      if (nextState) {\n        setSession(prevStateSession => {\n          if (prevStateSession === null) {\n            return {\n              label: \"Focusing\",\n              timeRemaining: focusDuration * 60\n            };\n          }\n\n          return prevStateSession;\n        });\n      }\n\n      return nextState;\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"pomodoro\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(IntervalButtons, {\n    session: session,\n    focusDuration: focusDuration,\n    breakDuration: breakDuration,\n    handleFocusDecrease: handleFocusDecrease,\n    handleFocusIncrease: handleFocusIncrease,\n    handleBreakDecrease: handleBreakDecrease,\n    handleBreakIncrease: handleBreakIncrease,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(TimerControls, {\n    playPause: playPause,\n    isTimerRunning: isTimerRunning,\n    handleStopSession: handleStopSession,\n    session: session,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Session, {\n    session: session,\n    updatedAria: updatedAria,\n    displayDuration: displayDuration,\n    isTimerRunning: isTimerRunning,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default Pomodoro;","map":{"version":3,"sources":["/Users/jakebedell/Desktop/Thinkful/Projects/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/Pomodoro.js"],"names":["React","useState","useInterval","Session","DurationButtons","TimerControls","nextTick","prevState","timeRemaining","Math","max","nextSession","focusDuration","breakDuration","currentSession","label","Pomodoro","isTimerRunning","setIsTimerRunning","session","setSession","setFocusDuration","setBreakDuration","handleFocusDecrease","handleFocusIncrease","handleBreakDecrease","handleBreakIncrease","handleStopSession","displayDuration","updateAria","time","updatedAria","Audio","play","playPause","nextState","prevStateSession"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport useInterval from \"../utils/useInterval\";\nimport Session from \"./Session\";\nimport DurationButtons from \"./DurationButtons\";\nimport TimerControls from \"./TimerControls\";\n\nfunction nextTick(prevState) {\n  const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n  return {\n    ...prevState,\n    timeRemaining,\n  };\n}\n\nfunction nextSession(focusDuration, breakDuration) {\n\n  return (currentSession) => {\n    if (currentSession.label === \"Focusing\") {\n      return {\n        label: \"On Break\",\n        timeRemaining: breakDuration * 60,\n      };\n    }\n    return {\n      label: \"Focusing\",\n      timeRemaining: focusDuration * 60,\n    };\n  };\n}\n\nfunction Pomodoro() {\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  const [session, setSession] = useState(null);\n  const [focusDuration, setFocusDuration] = useState(25);\n  const [breakDuration, setBreakDuration] = useState(5);\n\n  const handleFocusDecrease = () => {\n    if (focusDuration > 5) setFocusDuration(focusDuration - 5);\n  };\n\n  const handleFocusIncrease = () => {\n    if (focusDuration < 60) setFocusDuration(focusDuration + 5);\n  };\n\n  const handleBreakDecrease = () => {\n    if (breakDuration > 1) {\n      setBreakDuration(breakDuration - 1);\n    }\n  };\n\n  const handleBreakIncrease = () => {\n    if (breakDuration < 15) {\n      setBreakDuration(breakDuration + 1);\n    }\n  };\n\n  const handleStopSession = () => {\n    setIsTimerRunning(false);\n    setSession(null);\n  };\n\n  const displayDuration = (label) => {\n    if (label === \"Focusing\") {\n      return focusDuration;\n    } else return breakDuration;\n  };\n\n  const updateAria = (time, label) => {\n    return 100 - (time / (displayDuration(label) * 60)) * 100;\n  };\n\n  const updatedAria = updateAria(session?.timeRemaining, session?.label);\n\n  useInterval(\n    () => {\n      if (session.timeRemaining === 0) {\n        new Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play();\n        return setSession(nextSession(focusDuration, breakDuration));\n      }\n      return setSession(nextTick);\n    },\n    isTimerRunning ? 1000 : null\n  );\n\n  function playPause() {\n    setIsTimerRunning((prevState) => {\n      const nextState = !prevState;\n      if (nextState) {\n        setSession((prevStateSession) => {\n          if (prevStateSession === null) {\n            return {\n              label: \"Focusing\",\n              timeRemaining: focusDuration * 60,\n            };\n          }\n          return prevStateSession;\n        });\n      }\n      return nextState;\n    });\n  }\n\n  return (\n    <div className=\"pomodoro\">\n      <IntervalButtons\n        session={session}\n        focusDuration={focusDuration}\n        breakDuration={breakDuration}\n        handleFocusDecrease={handleFocusDecrease}\n        handleFocusIncrease={handleFocusIncrease}\n        handleBreakDecrease={handleBreakDecrease}\n        handleBreakIncrease={handleBreakIncrease}\n      />\n      <TimerControls\n        playPause={playPause}\n        isTimerRunning={isTimerRunning}\n        handleStopSession={handleStopSession}\n        session={session}\n      />\n      <Session\n        session={session}\n        updatedAria={updatedAria}\n        displayDuration={displayDuration}\n        isTimerRunning={isTimerRunning}\n      />\n    </div>\n  );\n}\n\nexport default Pomodoro;"]},"metadata":{},"sourceType":"module"}