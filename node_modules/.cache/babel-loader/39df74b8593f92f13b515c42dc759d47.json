{"ast":null,"code":"var _jsxFileName = \"/Users/jakebedell/Desktop/Thinkful/Projects/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/Pomodoro.js\";\nimport React, { useState } from \"react\";\nimport useInterval from \"../utils/useInterval\";\nimport Session from \"./Session\";\nimport IntervalButtons from \"./IntervalButtons\";\nimport TimerControls from \"./TimerControls\";\n\nfunction nextTick(prevState) {\n  const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n  return { ...prevState,\n    timeRemaining\n  };\n}\n/* State function to transition the current session type to the \nnext session. e.g. On Break -> Focusing or Focusing -> On Break */\n\n\nfunction nextSession(focusDuration, breakDuration) {\n  return currentSession => {\n    if (currentSession.label === \"Focusing\") {\n      return {\n        label: \"On Break\",\n        timeRemaining: breakDuration * 60\n      };\n    }\n\n    return {\n      label: \"Focusing\",\n      timeRemaining: focusDuration * 60\n    };\n  };\n}\n\nfunction Pomodoro() {\n  //Timer starts paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false); //Current session is null\n\n  const [session, setSession] = useState(null);\n  const [focusDuration, setFocusDuration] = useState(25);\n  const [breakDuration, setBreakDuration] = useState(5); // This section handles the decrements and increments of the buttons\n\n  const focusDecreaseHandler = () => {\n    setFocusDuration(Math.max(5, focusDuration - 5));\n  };\n\n  const focusIncreaseHandler = () => {\n    setFocusDuration(Math.min(60, focusDuration + 5));\n  };\n\n  const breakDecreaseHandler = () => {\n    setBreakDuration(Math.min(15, breakDuration + 1));\n  };\n\n  const breakIncreaseHandler = () => {\n    setBreakDuration(Math.max(1, breakDuration - 1));\n  }; //Stop button \n\n\n  const handleStopSession = () => {\n    setIsTimerRunning(false);\n    setSession(null);\n  };\n\n  const displayDuration = label => {\n    if (label === \"Focusing\") {\n      return focusDuration;\n    } else return breakDuration;\n  };\n\n  const updateAria = (time, label) => {\n    return 100 - time / (displayDuration(label) * 60) * 100;\n  };\n\n  const updatedAria = updateAria(session.timeRemaining, session.label);\n  useInterval(() => {\n    if (session.timeRemaining === 0) {\n      new Audio(`https://bigsoundbank.com/UPLOAD/mp3/1482.mp3`).play();\n      return setSession(nextSession(focusDuration, breakDuration));\n    }\n\n    return setSession(nextTick);\n  }, isTimerRunning ? 1000 : null);\n\n  function playPause() {\n    setIsTimerRunning(prevState => {\n      const nextState = !prevState;\n\n      if (nextState) {\n        setSession(prevStateSession => {\n          if (prevStateSession === null) {\n            return {\n              label: \"Focusing\",\n              timeRemaining: focusDuration * 60\n            };\n          }\n\n          return prevStateSession;\n        });\n      }\n\n      return nextState;\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"pomodoro\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(IntervalButtons, {\n    session: session,\n    focusDuration: focusDuration,\n    breakDuration: breakDuration,\n    focusDecreaseHandler: focusDecreaseHandler,\n    focusIncreaseHandler: focusIncreaseHandler,\n    breakDecreaseHandler: breakDecreaseHandler,\n    breakIncreaseHandler: breakIncreaseHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(TimerControls, {\n    playPause: playPause,\n    isTimerRunning: isTimerRunning,\n    handleStopSession: handleStopSession,\n    session: session,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Session, {\n    session: session,\n    updatedAria: updatedAria,\n    displayDuration: displayDuration,\n    isTimerRunning: isTimerRunning,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default Pomodoro;","map":{"version":3,"sources":["/Users/jakebedell/Desktop/Thinkful/Projects/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/Pomodoro.js"],"names":["React","useState","useInterval","Session","IntervalButtons","TimerControls","nextTick","prevState","timeRemaining","Math","max","nextSession","focusDuration","breakDuration","currentSession","label","Pomodoro","isTimerRunning","setIsTimerRunning","session","setSession","setFocusDuration","setBreakDuration","focusDecreaseHandler","focusIncreaseHandler","min","breakDecreaseHandler","breakIncreaseHandler","handleStopSession","displayDuration","updateAria","time","updatedAria","Audio","play","playPause","nextState","prevStateSession"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport useInterval from \"../utils/useInterval\";\nimport Session from \"./Session\";\nimport IntervalButtons from \"./IntervalButtons\";\nimport TimerControls from \"./TimerControls\";\n\nfunction nextTick(prevState) {\n  const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n  return {\n    ...prevState,\n    timeRemaining,\n  };\n}\n\n\n/* State function to transition the current session type to the \nnext session. e.g. On Break -> Focusing or Focusing -> On Break */\n\nfunction nextSession(focusDuration, breakDuration) {\n\n  return (currentSession) => {\n    if (currentSession.label === \"Focusing\") {\n      return {\n        label: \"On Break\",\n        timeRemaining: breakDuration * 60,\n      };\n    }\n    return {\n      label: \"Focusing\",\n      timeRemaining: focusDuration * 60,\n    };\n  };\n}\n\nfunction Pomodoro() {\n\n  //Timer starts paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n\n  //Current session is null\n  const [session, setSession] = useState(null);\n\n\n  const [focusDuration, setFocusDuration] = useState(25);\n  const [breakDuration, setBreakDuration] = useState(5);\n\n\n  // This section handles the decrements and increments of the buttons\n  const focusDecreaseHandler = () => {\n    setFocusDuration(Math.max(5, focusDuration - 5));\n  };\n\n  const focusIncreaseHandler = () => {\n    setFocusDuration(Math.min(60, focusDuration + 5));\n  };\n\n  const breakDecreaseHandler = () => {\n    setBreakDuration(Math.min(15, breakDuration + 1));\n  };\n\n  const breakIncreaseHandler = () => {\n   setBreakDuration(Math.max(1, breakDuration - 1));\n  };\n\n  //Stop button \n  const handleStopSession = () => {\n    setIsTimerRunning(false);\n    setSession(null);\n  };\n\n  const displayDuration = (label) => {\n    if (label === \"Focusing\") {\n      return focusDuration;\n    } else return breakDuration;\n  };\n\n  const updateAria = (time, label) => {\n    return 100 - (time / (displayDuration(label) * 60)) * 100;\n  };\n\n  const updatedAria = updateAria(session.timeRemaining, session.label);\n\n  useInterval(\n    () => {\n      if (session.timeRemaining === 0) {\n        new Audio(`https://bigsoundbank.com/UPLOAD/mp3/1482.mp3`).play();\n        return setSession(nextSession(focusDuration, breakDuration));\n      }\n      return setSession(nextTick);\n    },\n    isTimerRunning ? 1000 : null\n  );\n\n  function playPause() {\n    setIsTimerRunning((prevState) => {\n      const nextState = !prevState;\n      if (nextState) {\n        setSession((prevStateSession) => {\n          if (prevStateSession === null) {\n            return {\n              label: \"Focusing\",\n              timeRemaining: focusDuration * 60,\n            };\n          }\n          return prevStateSession;\n        });\n      }\n      return nextState;\n    });\n  }\n\n  return (\n    <div className=\"pomodoro\">\n      <IntervalButtons\n        session={session}\n        focusDuration={focusDuration}\n        breakDuration={breakDuration}\n        focusDecreaseHandler={focusDecreaseHandler}\n        focusIncreaseHandler={focusIncreaseHandler}\n        breakDecreaseHandler={breakDecreaseHandler}\n        breakIncreaseHandler={breakIncreaseHandler}\n      />\n      <TimerControls\n        playPause={playPause}\n        isTimerRunning={isTimerRunning}\n        handleStopSession={handleStopSession}\n        session={session}\n      />\n      <Session\n        session={session}\n        updatedAria={updatedAria}\n        displayDuration={displayDuration}\n        isTimerRunning={isTimerRunning}\n      />\n    </div>\n  );\n}\n\nexport default Pomodoro;"]},"metadata":{},"sourceType":"module"}